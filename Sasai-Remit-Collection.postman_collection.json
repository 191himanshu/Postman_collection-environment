{
	"info": {
		"_postman_id": "2ec470bc-1902-48c7-811b-14614c2835df",
		"name": "Sasai-Remit-Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18816109",
		"_collection_link": "https://gold-crater-4773.postman.co/workspace/Sasai-Fintech-Workspace~216e1390-9e2d-4166-b59f-d3d0da3a1bb2/collection/18816109-2ec470bc-1902-48c7-811b-14614c2835df?action=share&source=collection_link&creator=18816109"
	},
	"item": [
		{
			"name": "sa-production-za-zw-transaction-flow",
			"item": [
				{
					"name": "Sasai-Zimbabwe-UserRegistration",
					"item": [
						{
							"name": "guest user token generation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Objective: Verify that Auth token API working or not with below test cases.\r",
											"\r",
											"//environment setup\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"guestToken\", jsonData.accessToken)\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
											"    const statusCode = pm.response.code;\r",
											"\r",
											"    pm.expect(statusCode).to.satisfy(function (code) {\r",
											"        if (code==200){\r",
											"            var body = JSON.parse(responseBody);\r",
											"            tests[\"accessToken is string\"] = typeof(body.accessToken) === \"string\";\r",
											"\r",
											"\r",
											"            // Verify the response has a valid JSON body\r",
											"            pm.test(\"Validate the response in json\", function () {\r",
											"                var jsonData = pm.response.json();\r",
											"                pm.expect(jsonData.value);\r",
											"            });\r",
											"           \r",
											"            //Check value is null or not\r",
											"            pm.test(\"value is not null\", function () {\r",
											"                pm.expect(body.accessToken).to.not.be.null;                \r",
											"            });\r",
											"\r",
											"            // Check key value has some string\r",
											"            pm.test(\"Name is a non-empty string\", function () {\r",
											"                const responseData = pm.response.json();\r",
											"\r",
											"                pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"accessToken should not be empty\");\r",
											"            });\r",
											"            return true;\r",
											"\r",
											"        } else {\r",
											"           var body = JSON.parse(responseBody);\r",
											"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
											"            // Extract the value from the response body\r",
											"            var actualValue = body.errorCode;\r",
											"\r",
											"            // Get the value of the variable\r",
											"            var expectedValues = pm.globals.get(\"errorCode\");\r",
											"            var isValueInList = expectedValues.includes(actualValue);\r",
											"\r",
											"            // Perform an assertion\r",
											"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
											"                pm.expect(isValueInList).to.be.true;\r",
											"                console.log(\"actualValue\")\r",
											"            });\r",
											"            pm.expect.fail(\"Status code should not be 400\", \"Status code is 400\");\r",
											"\r",
											"        }\r",
											"                  \r",
											"     }, );\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"{{guest-username}}\",\r\n    \"password\":\"{{guest-password}}\",\r\n    \"tenantId\":\"{{guest-tenantId}}\",\r\n    \"clientId\": \"{{guest-clientId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{bff-url}}/v1/auth/token",
									"host": [
										"{{bff-url}}"
									],
									"path": [
										"v1",
										"auth",
										"token"
									]
								},
								"description": "StartFragment\n\n- Verify the App token API with invalid data\n    \n- Set up the environment for reusable response data to use as a request in another API.\n    \n- Verify that variables are reusable or not to access in another API\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
							},
							"response": []
						},
						{
							"name": "guest user master country",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Objectives: Verify the Country List API with below test cases\r",
											"\r",
											"//environment setup\r",
											"// Parse the response body as JSON\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Initialize a variable to store the found ID\r",
											"var IsdCode = null;\r",
											"\r",
											"// Iterate through the array to find the required key\r",
											"responseBody.items.forEach(function(item) {\r",
											"    if (item.name === \"Zimbabwe\") {\r",
											"        IsdCode = item.isdCode;\r",
											"        return; // Exit the loop if the desired value is found\r",
											"    }\r",
											"});\r",
											"// Set the value of the environment variable if found, or a default value if not found\r",
											"if (IsdCode !== null) {\r",
											"    pm.environment.set(\"recepientcountry-isdcode\", IsdCode);\r",
											"} \r",
											"else {\r",
											"    pm.environment.set(\"recepientcountry-isdcode\", \"Not Found\");\r",
											"}\r",
											"\r",
											"\r",
											"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    pm.expect(statusCode).to.satisfy(function (code) {\r",
											"        if (code == 200) {\r",
											"            var body = pm.response.json();\r",
											"            tests['key is string'] = typeof body.items[0].key === 'string';\r",
											"            \r",
											"            pm.test('Validate the response in json', function () {\r",
											"                var jsonData = pm.response.json();\r",
											"                pm.expect(jsonData.value);\r",
											"            });\r",
											"            pm.test('value is not null', function () {\r",
											"                pm.expect(body.items['key']).to.not.be.null;\r",
											"                pm.expect(body.items['name']).to.not.be.null;\r",
											"                pm.expect(body.items['isdCode']).to.not.be.null;\r",
											"                pm.expect(body.items['flagIcon']).to.not.be.null;\r",
											"            });\r",
											"            pm.test('key is a non-empty string', function () {\r",
											"                const responseData = pm.response.json();\r",
											"                pm.expect(responseData.items[0].key).to.be.a('string').and.to.have.lengthOf.at.least(1, 'key should not be empty');\r",
											"            });\r",
											"            return true;\r",
											"        } else {\r",
											"           var body = JSON.parse(responseBody);\r",
											"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
											"            // Extract the value from the response body\r",
											"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
											"\r",
											"            // Get the value of the variable\r",
											"            var expectedValues = pm.globals.get(\"errorCode\");\r",
											"            var isValueInList = expectedValues.includes(actualValue);\r",
											"\r",
											"            // Perform an assertion\r",
											"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
											"                pm.expect(isValueInList).to.be.true;\r",
											"                console.log(\"actualValue\")\r",
											"            });\r",
											"            pm.expect.fail(\"Status code should not be 400\", \"Status code is 400\");\r",
											"\r",
											"        }\r",
											"                  \r",
											"     }, );\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{guestToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "lang",
										"value": "errrttrtr",
										"type": "text",
										"disabled": true
									},
									{
										"key": "src",
										"value": "https://postman-echo.com/get?md5Hash=27a908d6163f03bb8d6ec0ca4d491c94&infoData=%E2%8F%AB%20%20hash%27s%20code%20sample%20can%20be%20found%20in%20the%20Pre-request%20script",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{bff-url}}/v1/master/country",
									"host": [
										"{{bff-url}}"
									],
									"path": [
										"v1",
										"master",
										"country"
									]
								},
								"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
							},
							"response": []
						},
						{
							"name": "otp request via mobile number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Objective: Verify that OTP request API working or not with below test cases.\r",
											"\r",
											"//environment setup\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"userReferenceId\", jsonData.userReferenceId)\r",
											"pm.environment.set(\"otpReferenceId\", jsonData.otpReferenceId)\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    pm.expect(statusCode).to.satisfy(function (code) {\r",
											"        if (code == 200) {\r",
											"            //Verify the json Data types\r",
											"            var body = JSON.parse(responseBody);\r",
											"            tests[\"otpReferenceId is string\"] = typeof(body.otpReferenceId) === \"string\";\r",
											"            tests[\"userReferenceId is string\"] = typeof(body.userReferenceId) === \"string\";\r",
											"\t\r",
											"\r",
											"            //Verify response value is not null\r",
											"            pm.test('value is not null', function () {\r",
											"                pm.expect(body.otpReferenceId).to.not.be.null;\r",
											"                pm.expect(body.userReferenceId).to.not.be.null;\r",
											"               \r",
											"            });\r",
											"            pm.test('key is a non-empty string', function () {\r",
											"                const responseData = pm.response.json();\r",
											"                pm.expect(responseData.userReferenceId).to.be.a('string').and.to.have.lengthOf.at.least(1, 'userReferenceId should not be empty');\r",
											"                pm.expect(responseData.otpReferenceId).to.be.a('string').and.to.have.lengthOf.at.least(1, 'otpReferenceId should not be empty');\r",
											"            });\r",
											"            return true;\r",
											"        } else {\r",
											"           var body = JSON.parse(responseBody);\r",
											"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
											"            // Extract the value from the response body\r",
											"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
											"\r",
											"            // Get the value of the variable\r",
											"            var expectedValues = pm.globals.get(\"errorCode\");\r",
											"            var isValueInList = expectedValues.includes(actualValue);\r",
											"\r",
											"            // Perform an assertion\r",
											"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
											"                pm.expect(isValueInList).to.be.true;\r",
											"                console.log(\"actualValue\")\r",
											"            });\r",
											"            return false;\r",
											"\r",
											"        }\r",
											"                  \r",
											"     }, );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{guestToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"senderId\": \"{{env-recipient-ZW-mobileNumber}}\",\r\n      \"otpMode\": {{otpMode}},\r\n  \"countryCode\": \"{{recepientcountry-isdcode}}\",\r\n  \"purpose\": \"{{signupLoginPurpose}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{bff-url}}/v1/auth/otp/request",
									"host": [
										"{{bff-url}}"
									],
									"path": [
										"v1",
										"auth",
										"otp",
										"request"
									]
								},
								"description": "- Set up the environment for reusable response data to use as a request in another API.\n- Verify that variables are reusable or not to access in another API\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values"
							},
							"response": []
						},
						{
							"name": "resend otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Objective: Verify that Resend OTP API working or not for new user email with below test cases.\r",
											"\r",
											"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    pm.expect(statusCode).to.satisfy(function (code) {\r",
											"        if (code == 200) {\r",
											"         //Verify the json Data types\r",
											"        var body = JSON.parse(responseBody);\r",
											"        tests[\"otpReferenceId is string\"] = typeof(body.otpReferenceId) === \"string\";\r",
											"        tests[\"message is string\"] = typeof(body.message) === \"string\";\r",
											"\r",
											"\r",
											"        // Verify the value in response is not null\r",
											"        var response = pm.response.json()\r",
											"        pm.test(\"value is not null\", function () {\r",
											"            pm.expect(response.otpReferenceId).to.not.be.null;\r",
											"            pm.expect(response.message).to.not.be.null;\r",
											"            \r",
											"        });\r",
											"\t    return true;\r",
											"        \r",
											"        } else  {\r",
											"           var body = JSON.parse(responseBody);\r",
											"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
											"            // Extract the value from the response body\r",
											"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
											"\r",
											"            // Get the value of the variable\r",
											"            var expectedValues = pm.globals.get(\"errorCode\");\r",
											"            var isValueInList = expectedValues.includes(actualValue);\r",
											"\r",
											"            // Perform an assertion\r",
											"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
											"                pm.expect(isValueInList).to.be.true;\r",
											"                console.log(\"actualValue\")\r",
											"            });\r",
											"            return false;\r",
											"        }                 \r",
											"     }, );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{guestToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userReferenceId\": \"{{userReferenceId}}\",\r\n  \"otpReferenceId\": \"{{otpReferenceId}}\",\r\n  \"otpMode\": {{otpMode}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{bff-url}}/v1/auth/otp/resend",
									"host": [
										"{{bff-url}}"
									],
									"path": [
										"v1",
										"auth",
										"otp",
										"resend"
									]
								},
								"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
							},
							"response": []
						},
						{
							"name": "verify otp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Objective: Verify that verify OTP API working or not for new user via email with below test cases.\r",
											"\r",
											"//Verify test cases according to error codes\r",
											"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    pm.expect(statusCode).to.satisfy(function (code) {\r",
											"        if (code == 200) {\r",
											"\r",
											"            //Verify the json Data types\r",
											"            var body = JSON.parse(responseBody);\r",
											"            tests[\"message is string\"] = typeof(body.message) === \"string\";\r",
											"\r",
											"            // Verify the value in response is not null\r",
											"            var response = pm.response.json()\r",
											"            pm.test(\"value is not null\", function () {\r",
											"                pm.expect(response.message).to.not.be.null;\r",
											"                \r",
											"            });\r",
											"\t\r",
											"          \r",
											"            pm.test('key is a non-empty string', function () {\r",
											"                const responseData = pm.response.json();\r",
											"                pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'message should not be empty');\r",
											"\r",
											"            });\r",
											"            return true;\r",
											"        } else  {\r",
											"           var body = JSON.parse(responseBody);\r",
											"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
											"            // Extract the value from the response body\r",
											"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
											"\r",
											"            // Get the value of the variable\r",
											"            var expectedValues = pm.globals.get(\"errorCode\");\r",
											"            var isValueInList = expectedValues.includes(actualValue);\r",
											"\r",
											"            // Perform an assertion\r",
											"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
											"                pm.expect(isValueInList).to.be.true;\r",
											"                console.log(\"actualValue\")\r",
											"            });\r",
											"            return false;\r",
											"        }                 \r",
											"     }, );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{guestToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"otpReferenceId\": \"{{otpReferenceId}}\",\r\n  \"otp\": \"{{otp}}\",\r\n  \"userReferenceId\": \"{{userReferenceId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{bff-url}}/v1/auth/otp/verify",
									"host": [
										"{{bff-url}}"
									],
									"path": [
										"v1",
										"auth",
										"otp",
										"verify"
									]
								},
								"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
							},
							"response": []
						},
						{
							"name": "verify pin for get access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Objective: Verify that Verify PIN API working or not new mobile with below test cases.\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"userToken\", jsonData.accessToken)\r",
											"\r",
											"//Verify test cases according to error codes\r",
											"pm.test('Verify that the status code appropriate error messages', function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    pm.expect(statusCode).to.satisfy(function (code) {\r",
											"        if (code == 200) {\r",
											"            //Verify the json Data types\r",
											"            var body = JSON.parse(responseBody);\r",
											"            tests[\"username is string\"] = typeof(body.username) === \"string\";\r",
											"            tests[\"accessToken is string\"] = typeof(body.accessToken) === \"string\";\r",
											"\r",
											"            // Verify the value in response is not null\r",
											"            var response = pm.response.json()\r",
											"            pm.test(\"value is not null\", function () {\r",
											"                pm.expect(response.username).to.not.be.null;\r",
											"                pm.expect(response.accessToken).to.not.be.null;\r",
											"                pm.expect(response.expiresIn).to.not.be.null;\r",
											"                \r",
											"            });\r",
											"\t\r",
											"            //Verify header is present \r",
											"            pm.test('Headaer: Content-Type is present', function () {\r",
											"                pm.response.to.have.header('Content-Type');\r",
											"            });\r",
											"\r",
											"            //Verify header values\r",
											"            pm.test('header values', function () {\r",
											"                pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"            });\r",
											"\r",
											"            //Verify json response have some value \r",
											"            pm.test('Validate the response in json', function () {\r",
											"                var jsonData = pm.response.json();\r",
											"                pm.expect(jsonData.value);\r",
											"            });\r",
											"\r",
											"            pm.test('key is a non-empty string', function () {\r",
											"                const responseData = pm.response.json();\r",
											"                pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, 'accessToken should not be empty');\r",
											"                pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, 'message should not be empty');\r",
											"            });\r",
											"            return true;\r",
											"\r",
											"        } else  {\r",
											"           var body = JSON.parse(responseBody);\r",
											"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
											"            // Extract the value from the response body\r",
											"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
											"\r",
											"            // Get the value of the variable\r",
											"            var expectedValues = pm.globals.get(\"errorCode\");\r",
											"            var isValueInList = expectedValues.includes(actualValue);\r",
											"\r",
											"            // Perform an assertion\r",
											"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
											"                pm.expect(isValueInList).to.be.true;\r",
											"                console.log(\"actualValue\")\r",
											"            });\r",
											"            return false;\r",
											"        }                 \r",
											"     }, );\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{guestToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pin\": \"{{verify-pin}}\",\n    \"userReferenceId\": \"{{userReferenceId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{bff-url}}/v1/auth/pin/verify",
									"host": [
										"{{bff-url}}"
									],
									"path": [
										"v1",
										"auth",
										"pin",
										"verify"
									]
								},
								"description": "- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values"
							},
							"response": []
						},
						{
							"name": "Get user profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Objective: Verify that Get user profile working or not for new user via mobile no. with below test cases\r",
											"//environment setup\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"recipient-fullName\", jsonData.name)\r",
											"\r",
											"//Verify test cases according to error codes\r",
											"pm.test('Verify that the status code appropriate error messages', function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    pm.expect(statusCode).to.satisfy(function (code) {\r",
											"        if (code == 200) {\r",
											"\r",
											"            // Get the response body\r",
											"            const responseBody = pm.response.text();\r",
											"\r",
											"            // Function to check if a string is a valid JSON\r",
											"            function isValidJSON(str) {\r",
											"                try {\r",
											"                    JSON.parse(str);\r",
											"                    return true;\r",
											"                } catch (e) {\r",
											"                    return false;\r",
											"                }\r",
											"            }\r",
											"\r",
											"            //Verify the json Data types\r",
											"            var body = JSON.parse(responseBody);\r",
											"            tests[\"name is string\"] = typeof(body.name) === \"string\";\r",
											"            tests[\"phone is string\"] = typeof(body.phone) === \"string\";\r",
											"\r",
											"            // Verify the value in response is not null\r",
											"            var response = pm.response.json()\r",
											"            pm.test(\"value is not null\", function () {\r",
											"                pm.expect(response.name).to.not.be.null;\r",
											"                pm.expect(response.phone).to.not.be.null;\r",
											"     \r",
											"            });\r",
											"\t\r",
											"        \r",
											"            return true;\r",
											"\r",
											"        } else  {\r",
											"\r",
											"            // Get the response body\r",
											"            const responseBody = pm.response.text();\r",
											"\r",
											"            // Function to check if a string is a valid JSON\r",
											"            function isValidJSON(str) {\r",
											"                try {\r",
											"                    JSON.parse(str);\r",
											"                    return true;\r",
											"                } catch (e) {\r",
											"                    return false;\r",
											"                }\r",
											"            }\r",
											"\r",
											"           var body = JSON.parse(responseBody);\r",
											"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
											"            // Extract the value from the response body\r",
											"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
											"\r",
											"            // Get the value of the variable\r",
											"            var expectedValues = pm.globals.get(\"errorCode\");\r",
											"            var isValueInList = expectedValues.includes(actualValue);\r",
											"\r",
											"            // Perform an assertion\r",
											"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
											"                pm.expect(isValueInList).to.be.true;\r",
											"                console.log(\"actualValue\")\r",
											"            });\r",
											"            return true;\r",
											"        }                 \r",
											"     }, );\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{bff-url}}/v1/user/profile",
									"host": [
										"{{bff-url}}"
									],
									"path": [
										"v1",
										"user",
										"profile"
									]
								},
								"description": "StartFragment\n\n- Verify that valid response are displaying of user profile API\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
							},
							"response": []
						}
					]
				},
				{
					"name": "guest user token generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Auth token API working or not with below test cases.\r",
									"\r",
									"//environment setup\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"guestToken\", jsonData.accessToken)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
									"    const statusCode = pm.response.code;\r",
									"\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code==200){\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"accessToken is string\"] = typeof(body.accessToken) === \"string\";\r",
									"\r",
									"\r",
									"            // Verify the response has a valid JSON body\r",
									"            pm.test(\"Validate the response in json\", function () {\r",
									"                var jsonData = pm.response.json();\r",
									"                pm.expect(jsonData.value);\r",
									"            });\r",
									"           \r",
									"            //Check value is null or not\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(body.accessToken).to.not.be.null;                \r",
									"            });\r",
									"\r",
									"            // Check key value has some string\r",
									"            pm.test(\"Name is a non-empty string\", function () {\r",
									"                const responseData = pm.response.json();\r",
									"\r",
									"                pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"accessToken should not be empty\");\r",
									"            });\r",
									"            return true;\r",
									"\r",
									"        } else {\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode;\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            pm.expect.fail(\"Status code should not be 400\", \"Status code is 400\");\r",
									"\r",
									"        }\r",
									"                  \r",
									"     }, );\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{guest-username}}\",\r\n    \"password\":\"{{guest-password}}\",\r\n    \"tenantId\":\"{{guest-tenantId}}\",\r\n    \"clientId\": \"{{guest-clientId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bff-url}}/v1/auth/token",
							"host": [
								"{{bff-url}}"
							],
							"path": [
								"v1",
								"auth",
								"token"
							]
						},
						"description": "StartFragment\n\n- Verify the App token API with invalid data\n    \n- Set up the environment for reusable response data to use as a request in another API.\n    \n- Verify that variables are reusable or not to access in another API\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "guest user master country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objectives: Verify the Country List API with below test cases\r",
									"\r",
									"//environment setup\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Initialize a variable to store the found ID\r",
									"var IsdCode = null;\r",
									"\r",
									"// Iterate through the array to find the required key\r",
									"responseBody.items.forEach(function(item) {\r",
									"    if (item.name === \"South Africa\") {\r",
									"        IsdCode = item.isdCode;\r",
									"        return; // Exit the loop if the desired value is found\r",
									"    }\r",
									"});\r",
									"// Set the value of the environment variable if found, or a default value if not found\r",
									"if (IsdCode !== null) {\r",
									"    pm.environment.set(\"sendingcountry-isdcode\", IsdCode);\r",
									"} \r",
									"else {\r",
									"    pm.environment.set(\"sendingcountry-isdcode\", \"Not Found\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"            var body = pm.response.json();\r",
									"            tests['key is string'] = typeof body.items[0].key === 'string';\r",
									"            \r",
									"            pm.test('Validate the response in json', function () {\r",
									"                var jsonData = pm.response.json();\r",
									"                pm.expect(jsonData.value);\r",
									"            });\r",
									"            pm.test('value is not null', function () {\r",
									"                pm.expect(body.items['key']).to.not.be.null;\r",
									"                pm.expect(body.items['name']).to.not.be.null;\r",
									"                pm.expect(body.items['isdCode']).to.not.be.null;\r",
									"                pm.expect(body.items['flagIcon']).to.not.be.null;\r",
									"            });\r",
									"            pm.test('key is a non-empty string', function () {\r",
									"                const responseData = pm.response.json();\r",
									"                pm.expect(responseData.items[0].key).to.be.a('string').and.to.have.lengthOf.at.least(1, 'key should not be empty');\r",
									"            });\r",
									"            return true;\r",
									"        } else {\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            pm.expect.fail(\"Status code should not be 400\", \"Status code is 400\");\r",
									"\r",
									"        }\r",
									"                  \r",
									"     }, );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{guestToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "lang",
								"value": "errrttrtr",
								"type": "text",
								"disabled": true
							},
							{
								"key": "src",
								"value": "https://postman-echo.com/get?md5Hash=27a908d6163f03bb8d6ec0ca4d491c94&infoData=%E2%8F%AB%20%20hash%27s%20code%20sample%20can%20be%20found%20in%20the%20Pre-request%20script",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{bff-url}}/v1/master/country",
							"host": [
								"{{bff-url}}"
							],
							"path": [
								"v1",
								"master",
								"country"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "otp request via mobile number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that OTP request API working or not with below test cases.\r",
									"\r",
									"//environment setup\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userReferenceId\", jsonData.userReferenceId)\r",
									"pm.environment.set(\"otpReferenceId\", jsonData.otpReferenceId)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"otpReferenceId is string\"] = typeof(body.otpReferenceId) === \"string\";\r",
									"            tests[\"userReferenceId is string\"] = typeof(body.userReferenceId) === \"string\";\r",
									"\t\r",
									"           \r",
									"            //Verify response value is not null\r",
									"            pm.test('value is not null', function () {\r",
									"                pm.expect(body.otpReferenceId).to.not.be.null;\r",
									"                pm.expect(body.userReferenceId).to.not.be.null;\r",
									"               \r",
									"            });\r",
									"            pm.test('key is a non-empty string', function () {\r",
									"                const responseData = pm.response.json();\r",
									"                pm.expect(responseData.userReferenceId).to.be.a('string').and.to.have.lengthOf.at.least(1, 'userReferenceId should not be empty');\r",
									"                pm.expect(responseData.otpReferenceId).to.be.a('string').and.to.have.lengthOf.at.least(1, 'otpReferenceId should not be empty');\r",
									"            });\r",
									"            return true;\r",
									"        } else {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            // Test whether the response body is a valid JSON\r",
									"            pm.test('Response body should be a valid JSON', function() {\r",
									"                pm.expect(isValidJSON(responseBody)).to.be.true;\r",
									"            });\r",
									"\r",
									"\r",
									"            // Test whether the response body is not null\r",
									"            pm.test('Response body should not be null', function() {\r",
									"                pm.expect(responseBody).not.to.be.null;\r",
									"            });\r",
									"            \r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"\r",
									"        }\r",
									"                  \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{guestToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"senderId\": \"{{env-bff-login-ZA-userId}}\",\r\n    \"otpMode\": {{otpMode}},\r\n  \"countryCode\": \"{{sendingcountry-isdcode}}\",\r\n  \"purpose\": \"{{signupLoginPurpose}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bff-url}}/v1/auth/otp/request",
							"host": [
								"{{bff-url}}"
							],
							"path": [
								"v1",
								"auth",
								"otp",
								"request"
							]
						},
						"description": "- Set up the environment for reusable response data to use as a request in another API.\n- Verify that variables are reusable or not to access in another API\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values"
					},
					"response": []
				},
				{
					"name": "verify otp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that verify OTP API working or not for new user via email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"message is string\"] = typeof(body.message) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.message).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"           \r",
									"            pm.test('key is a non-empty string', function () {\r",
									"                const responseData = pm.response.json();\r",
									"                pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'message should not be empty');\r",
									"\r",
									"            });\r",
									"            return true;\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{guestToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"otpReferenceId\": \"{{otpReferenceId}}\",\r\n  \"otp\": \"{{otp}}\",\r\n  \"userReferenceId\": \"{{userReferenceId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bff-url}}/v1/auth/otp/verify",
							"host": [
								"{{bff-url}}"
							],
							"path": [
								"v1",
								"auth",
								"otp",
								"verify"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "verify pin for get access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Verify PIN API working or not new email with below test cases.\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"userToken\", jsonData.accessToken)\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"username is string\"] = typeof(body.username) === \"string\";\r",
									"            tests[\"accessToken is string\"] = typeof(body.accessToken) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.message).to.not.be.null;\r",
									"                pm.expect(response.accessToken).to.not.be.null;\r",
									"                pm.expect(response.expiresIn).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{guestToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pin\": \"{{verify-pin}}\",\n    \"userReferenceId\": \"{{userReferenceId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bff-url}}/v1/auth/pin/verify",
							"host": [
								"{{bff-url}}"
							],
							"path": [
								"v1",
								"auth",
								"pin",
								"verify"
							]
						},
						"description": "- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values"
					},
					"response": []
				},
				{
					"name": "section data -account status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that recent reccipient  api working or not with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"userStatus is string\"] = typeof(body.moneyTransfer.userInfo.userStatus) === \"string\";\r",
									"            \r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.moneyTransfer.userInfo.userStatus).to.not.be.null;\r",
									"\r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "requestId",
								"value": "bdefac7b-bbc0-48b4-9ef0-84e6b9b34a6f",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{bff-url}}/v1/config/section/data?keys[]=MONEY_TRANSFER",
							"host": [
								"{{bff-url}}"
							],
							"path": [
								"v1",
								"config",
								"section",
								"data"
							],
							"query": [
								{
									"key": "requestId",
									"value": "bdefac7b-bbc0-48b4-9ef0-84e6b9b34a6f",
									"disabled": true
								},
								{
									"key": "keys[]",
									"value": "MONEY_TRANSFER"
								}
							]
						},
						"description": "StartFragment\n\n- Verify that data is fetching of instruments of user\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "remittance master country lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//environment setup\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"sendingCountryId\", jsonData.items[0].countryId)\r",
									"pm.environment.set(\"sendingCountryIsdCode\", jsonData.items[0].countryIsdCode)\r",
									"pm.environment.set(\"sendingCountryCode\", jsonData.items[0].countryCode)\r",
									"pm.environment.set(\"sendingCurrencyId\", jsonData.items[0].currencies[0].currencyId)\r",
									"\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Initialize a variable to store the found ID\r",
									"var CountryId = null;\r",
									"var CountryCode = null;\r",
									"var CountryIsdCode = null;\r",
									"var CurrencyId = null;\r",
									"\r",
									"// Iterate through the array to find the required key\r",
									"responseBody.items[0].receivingCountries.forEach(function(item) {\r",
									"    if (item.name === \"Zimbabwe\") {\r",
									"        CountryId = item.countryId;\r",
									"        CountryCode = item.countryCode;\r",
									"        CountryIsdCode = item.countryIsdCode;\r",
									"        CurrencyId = item.currencies[0].currencyId;\r",
									"        return; // Exit the loop if the desired value is found\r",
									"    }\r",
									"});\r",
									"// Set the value of the environment variable if found, or a default value if not found\r",
									"if (CountryId !== null) {\r",
									"    pm.environment.set(\"receivingCountryId\", CountryId);\r",
									"} \r",
									"if (CountryCode !== null) {\r",
									"    pm.environment.set(\"receivingCountryCode\", CountryCode);\r",
									"}\r",
									"if (CountryIsdCode !== null) {\r",
									"    pm.environment.set(\"receivingCountryIsdCode\", CountryIsdCode);\r",
									"}\r",
									"if (CurrencyId !== null) {\r",
									"    pm.environment.set(\"receivingCurrencyId\", CurrencyId);\r",
									"}\r",
									"else {\r",
									"    pm.environment.set(\"receivingCountryId\", \"Not Found\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "charset",
								"value": "UTF-8",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{remit-url}}/v1/master/country?currentUpdatedAt=0",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"master",
								"country"
							],
							"query": [
								{
									"key": "currentUpdatedAt",
									"value": "0"
								}
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "master configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonBody = pm.response.json();\r",
									"pm.environment.set(\"province\", jsonBody.province[0].key);\r",
									"pm.environment.set(\"relationship\", jsonBody.relationship[0].key);\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"gender key is string\"] = typeof(body.gender[0].key) === \"string\";\r",
									"            tests[\"gender value is string\"] = typeof(body.gender[0].value) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.gender[0].key).to.not.be.null;\r",
									"                pm.expect(response.gender[0].value).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/master/configurations?currentUpdatedAt=0",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"master",
								"configurations"
							],
							"query": [
								{
									"key": "currentUpdatedAt",
									"value": "0"
								}
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "product group list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Verify the test cases in case of success or failure(with error codes)\", function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"            \r",
									"\r",
									"            // Test whether the response body is a valid JSON\r",
									"            pm.test('Response body should be a valid JSON', function() {\r",
									"                pm.expect(isValidJSON(responseBody)).to.be.true;\r",
									"            });\r",
									"        \r",
									"\r",
									"            return true;\r",
									"        } else {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            // Test whether the response body is a valid JSON\r",
									"            pm.test('Response body should be a valid JSON', function() {\r",
									"                pm.expect(isValidJSON(responseBody)).to.be.true;\r",
									"            });\r",
									"\r",
									"\r",
									"            // Test whether the response body is not null\r",
									"            pm.test('Response body should not be null', function() {\r",
									"                pm.expect(responseBody).not.to.be.null;\r",
									"            });\r",
									"            \r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"\r",
									"        }\r",
									"                  \r",
									"     }, );\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/product/group/list?currentUpdatedAt=123456789",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"product",
								"group",
								"list"
							],
							"query": [
								{
									"key": "currentUpdatedAt",
									"value": "123456789"
								}
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "delivery method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that delivery method api working or not for new email with below test cases.\r",
									"\r",
									"//environment setup\r",
									"// Parse the response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Initialize a variable to store the found ID\r",
									"var ProductId = null;\r",
									"var ProductGroupId = null;\r",
									"\r",
									"// Iterate through the array to find the required key\r",
									"responseBody.items.forEach(function(item) {\r",
									"    if (item.productId == \"12\") { \r",
									"        ProductId = item.productId;\r",
									"        ProductGroupId = item.productGroupId;\r",
									"        return; // Exit the loop if the desired value is found\r",
									"    }\r",
									"});\r",
									"// Set the value of the environment variable if found, or a default value if not found\r",
									"if (ProductId !== null & ProductGroupId !== null) {\r",
									"    pm.environment.set(\"productId\", ProductId);\r",
									"    pm.environment.set(\"paymentMethodId\", ProductGroupId);\r",
									"} \r",
									"else {\r",
									"    pm.environment.set(\"productId\", \"Not Found\");\r",
									"    pm.environment.set(\"paymentMethodId\", \"Not Found\");\r",
									"}\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"productGroupId is string\"] = typeof(body.items[0].productGroupId) === \"string\";\r",
									"            tests[\"productGroupName is string\"] = typeof(body.items[0].productGroupName) === \"string\";\r",
									"            tests[\"type is string\"] = typeof(body.items[0].type) === \"string\";\r",
									"            tests[\"name is string\"] = typeof(body.items[0].name) === \"string\";\r",
									"            tests[\"title is string\"] = typeof(body.items[0].title) === \"string\";\r",
									"            tests[\"productId is number\"] = typeof(body.items[0].productId) === \"number\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.items[0].productGroupId).to.not.be.null;\r",
									"                pm.expect(response.items[0].productGroupName).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/recipient/deliverymethod/{{receivingCountryCode}}",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient",
								"deliverymethod",
								"{{receivingCountryCode}}"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "sender configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that sender configuration API working or not for new email with below test cases.\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"reasonForTransfer\", jsonData.reasonForTransfer[0].key)\r",
									"pm.environment.set(\"paymentMethodType\", jsonData.paymentMethod[0].key)\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"key is string\"] = typeof(body.reasonForTransfer[0].key) === \"string\";\r",
									"            tests[\"value is string\"] = typeof(body.reasonForTransfer[0].value) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.reasonForTransfer[0].key).to.not.be.null;\r",
									"                pm.expect(response.reasonForTransfer[0].value).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/sender/configurations/{{receivingCountryCode}}/{{productId}}?currentUpdatedAt=0",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"sender",
								"configurations",
								"{{receivingCountryCode}}",
								"{{productId}}"
							],
							"query": [
								{
									"key": "currentUpdatedAt",
									"value": "0"
								}
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "delivery method questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that delivery method question api working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"type is string\"] = typeof(body.type) === \"string\";\r",
									"          \r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.type).to.not.be.null;\r",
									"              \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/recipient/deliverymethod/questions/{{receivingCountryCode}}/{{productId}}",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient",
								"deliverymethod",
								"questions",
								"{{receivingCountryCode}}",
								"{{productId}}"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "rate calculation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Rate calculation API working or not for new email with below test cases.\r",
									"\r",
									"//environment setup\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"calculationId\", jsonData.calculationId)\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"calculationId is string\"] = typeof(body.calculationId) === \"string\";\r",
									"            tests[\"calculateId is string\"] = typeof(body.calculateId) === \"string\";\r",
									"            tests[\"sendingAmount is string\"] = typeof(body.sendingAmount) === \"string\";\r",
									"            tests[\"recipientAmount is string\"] = typeof(body.recipientAmount) === \"string\";\r",
									"            tests[\"rate is string\"] = typeof(body.rate) === \"string\";\r",
									"            tests[\"reverseRate is string\"] = typeof(body.reverseRate) === \"string\";\r",
									"            tests[\"fees is string\"] = typeof(body.fees) === \"string\";\r",
									"            tests[\"vat is string\"] = typeof(body.vat) === \"string\";\r",
									"            tests[\"amountToPay is string\"] = typeof(body.amountToPay) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.calculationId).to.not.be.null;\r",
									"                pm.expect(response.calculateId).to.not.be.null;\r",
									"                pm.expect(response.sendingAmount).to.not.be.null;\r",
									"                pm.expect(response.recipientAmount).to.not.be.null;\r",
									"                pm.expect(response.rate).to.not.be.null;\r",
									"                pm.expect(response.reverseRate).to.not.be.null;\r",
									"                pm.expect(response.fees).to.not.be.null;\r",
									"                pm.expect(response.vat).to.not.be.null;\r",
									"                pm.expect(response.amountToPay).to.not.be.null;\r",
									"                \r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"receive\": false,\r\n  \"amount\": \"101\",\r\n  \"receivingCountryId\": {{receivingCountryId}},\r\n \"sendingCountryId\": {{sendingCountryId}},\r\n  \"sendingCurrencyId\": {{sendingCurrencyId}},\r\n  \"receivingCurrencyId\": {{receivingCurrencyId}},\r\n  \"productId\": {{productId}},\r\n  \"paymentMethodId\": \"{{paymentMethodId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/rate/calculation",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"rate",
								"calculation"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "negative rate calculation with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Rate calculation API working or not for new email with below test cases.\r",
									"\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"calculationId is string\"] = typeof(body.calculationId) === \"string\";\r",
									"            tests[\"calculateId is string\"] = typeof(body.calculateId) === \"string\";\r",
									"            tests[\"sendingAmount is string\"] = typeof(body.sendingAmount) === \"string\";\r",
									"            tests[\"recipientAmount is string\"] = typeof(body.recipientAmount) === \"string\";\r",
									"            tests[\"rate is string\"] = typeof(body.rate) === \"string\";\r",
									"            tests[\"reverseRate is string\"] = typeof(body.reverseRate) === \"string\";\r",
									"            tests[\"fees is string\"] = typeof(body.fees) === \"string\";\r",
									"            tests[\"vat is string\"] = typeof(body.vat) === \"string\";\r",
									"            tests[\"amountToPay is string\"] = typeof(body.amountToPay) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.calculationId).to.not.be.null;\r",
									"                pm.expect(response.calculateId).to.not.be.null;\r",
									"                pm.expect(response.sendingAmount).to.not.be.null;\r",
									"                pm.expect(response.recipientAmount).to.not.be.null;\r",
									"                pm.expect(response.rate).to.not.be.null;\r",
									"                pm.expect(response.reverseRate).to.not.be.null;\r",
									"                pm.expect(response.fees).to.not.be.null;\r",
									"                pm.expect(response.vat).to.not.be.null;\r",
									"                pm.expect(response.amountToPay).to.not.be.null;\r",
									"                \r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return false;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return true;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"receive\": false,\r\n  \"amount\": \"101\",\r\n  \"receivingCountryId\": {{sendingCountryId}},\r\n \"sendingCountryId\": {{sendingCountryId}},\r\n  \"sendingCurrencyId\": {{sendingCurrencyId}},\r\n  \"receivingCurrencyId\": {{receivingCurrencyId}},\r\n  \"productId\": {{productId}},\r\n  \"paymentMethodId\": \"{{paymentMethodId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/rate/calculation",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"rate",
								"calculation"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "user limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that User limit API working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"cumulativePerDay is string\"] = typeof(body.cumulativePerDay) === \"string\";\r",
									"            tests[\"cumulativePerMonth is string\"] = typeof(body.cumulativePerMonth) === \"string\";\r",
									"            tests[\"cumulativePer3months is string\"] = typeof(body.cumulativePer3months) === \"string\";\r",
									"            tests[\"cumulativePerYear is string\"] = typeof(body.cumulativePerYear) === \"string\";\r",
									"            tests[\"totalPerDay is string\"] = typeof(body.totalPerDay) === \"string\";\r",
									"            tests[\"totalPerMonth is string\"] = typeof(body.totalPerMonth) === \"string\";\r",
									"            tests[\"totalPerYear is string\"] = typeof(body.totalPerYear) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.cumulativePerDay).to.not.be.null;\r",
									"                pm.expect(response.cumulativePerMonth).to.not.be.null;\r",
									"                pm.expect(response.cumulativePer3months).to.not.be.null;\r",
									"                pm.expect(response.cumulativePerYear).to.not.be.null;\r",
									"                pm.expect(response.totalPerDay).to.not.be.null;\r",
									"                pm.expect(response.totalPerMonth).to.not.be.null;\r",
									"                pm.expect(response.totalPerYear).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/user/limits",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"user",
								"limits"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "add recepient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Add recipient API working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Assuming the full name is stored in a variable named \"fullName\"\r",
									"var fullName = pm.variables.get(\"recipient-fullName\");\r",
									"\r",
									"// Splitting the full name into an array of first and last name\r",
									"var nameArray = fullName.split(\" \");\r",
									"\r",
									"// Extracting the first name and last name\r",
									"var firstName = nameArray[0];\r",
									"var lastName = nameArray.slice(1).join(\" \"); // Joining the remaining elements as the last name\r",
									"\r",
									"// Setting the first and last name as environment variables\r",
									"pm.environment.set(\"recipient-firstName\", firstName);\r",
									"pm.environment.set(\"recipient-lastName\", lastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{recipient-firstName}}\",\r\n  \"lastName\": \"{{recipient-lastName}}\",\r\n  \"relationship\": \"{{relationship}}\",\r\n  \"mobileNo\": [\r\n    \"{{receivingCountryIsdCode}}\",\r\n    \"{{env-recipient-ZW-mobileNumber}}\"\r\n\r\n  ],\r\n  \"countryId\": \"{{receivingCountryId}}\",\r\n  \"productId\": {{productId}},\r\n   \"type\":\"CASH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/recipient",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Negative add recepient with already existing mobile number with diff name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Add recipient API working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\t\r",
									"        \r",
									"            return false;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return true;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Assuming the full name is stored in a variable named \"fullName\"\r",
									"var fullName = pm.variables.get(\"recipient-fullName\");\r",
									"\r",
									"// Splitting the full name into an array of first and last name\r",
									"var nameArray = fullName.split(\" \");\r",
									"\r",
									"// Extracting the first name and last name\r",
									"var firstName = nameArray[0];\r",
									"var lastName = nameArray.slice(1).join(\" \"); // Joining the remaining elements as the last name\r",
									"\r",
									"// Setting the first and last name as environment variables\r",
									"pm.environment.set(\"recipient-firstName\", firstName);\r",
									"pm.environment.set(\"recipient-lastName\", lastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{recipient-lastName}}\",\r\n  \"lastName\": \"{{recipient-firstName}}\",\r\n  \"relationship\": \"{{relationship}}\",\r\n  \"mobileNo\": [\r\n    \"{{receivingCountryIsdCode}}\",\r\n    \"{{env-recipient-ZW-mobileNumber}}\"\r\n\r\n  ],\r\n  \"countryId\": \"{{receivingCountryId}}\",\r\n  \"productId\": {{productId}},\r\n   \"type\":\"CASH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/recipient",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Negative add recepient without relationship",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Add recipient API working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\t\r",
									"        \r",
									"            return false;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorCode is string\"] = typeof(body.errorCode) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return true;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Assuming the full name is stored in a variable named \"fullName\"\r",
									"var fullName = pm.variables.get(\"recipient-fullName\");\r",
									"\r",
									"// Splitting the full name into an array of first and last name\r",
									"var nameArray = fullName.split(\" \");\r",
									"\r",
									"// Extracting the first name and last name\r",
									"var firstName = nameArray[0];\r",
									"var lastName = nameArray.slice(1).join(\" \"); // Joining the remaining elements as the last name\r",
									"\r",
									"// Setting the first and last name as environment variables\r",
									"pm.environment.set(\"recipient-firstName\", firstName);\r",
									"pm.environment.set(\"recipient-lastName\", lastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{recipient-firstName}}\",\r\n  \"lastName\": \"{{recipient-lastName}}\",\r\n  \"relationship\": \"  \",\r\n  \"mobileNo\": [\r\n    \"{{receivingCountryIsdCode}}\",\r\n    \"{{env-recipient-ZW-mobileNumber}}\"\r\n\r\n  ],\r\n  \"countryId\": \"{{receivingCountryId}}\",\r\n  \"productId\": {{productId}},\r\n   \"type\":\"CASH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/recipient",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Negative add recepient without mobile number Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Add recipient API working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\t\r",
									"        \r",
									"            return false;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorCode is string\"] = typeof(body.errorCode) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return true;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Assuming the full name is stored in a variable named \"fullName\"\r",
									"var fullName = pm.variables.get(\"recipient-fullName\");\r",
									"\r",
									"// Splitting the full name into an array of first and last name\r",
									"var nameArray = fullName.split(\" \");\r",
									"\r",
									"// Extracting the first name and last name\r",
									"var firstName = nameArray[0];\r",
									"var lastName = nameArray.slice(1).join(\" \"); // Joining the remaining elements as the last name\r",
									"\r",
									"// Setting the first and last name as environment variables\r",
									"pm.environment.set(\"recipient-firstName\", firstName);\r",
									"pm.environment.set(\"recipient-lastName\", lastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{recipient-firstName}}\",\r\n  \"lastName\": \"{{recipient-lastName}}\",\r\n  \"relationship\": \"{{relationship}}\",\r\n  \"mobileNo\": [\r\n    \"{{receivingCountryIsdCode}}\",\r\n    \"\"\r\n\r\n  ],\r\n  \"countryId\": \"{{receivingCountryId}}\",\r\n  \"productId\": {{productId}},\r\n   \"type\":\"CASH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/recipient",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get recipient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Get Profile API working or not for new email with below test cases.\r",
									"\r",
									"//environment setup\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"beneficiaryId\", jsonData.accounts[0].linkedAccountId)\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"firstName is string\"] = typeof(body.firstName) === \"string\";\r",
									"            tests[\"lastName is string\"] = typeof(body.lastName) === \"string\";\r",
									"            tests[\"mobile is string\"] = typeof(body.mobile) === \"string\";\r",
									"            tests[\"relationship is string\"] = typeof(body.relationship) === \"string\";\r",
									"            tests[\"countryCode is string\"] = typeof(body.countryCode) === \"string\";\r",
									"            tests[\"countryName is string\"] = typeof(body.countryName) === \"string\";\r",
									"            tests[\"customerId is string\"] = typeof(body.customerId) === \"string\";\r",
									"            tests[\"beneficiaryPayoutMethod is string\"] = typeof(body.accounts[0].beneficiaryPayoutMethod) === \"string\";\r",
									"            tests[\"recipientType is string\"] = typeof(body.accounts[0].recipientType) === \"string\";\r",
									"            tests[\"nickname is string\"] = typeof(body.accounts[0].nickname) === \"string\";\r",
									"            tests[\"beneficiaryType is string\"] = typeof(body.accounts[0].beneficiaryType) === \"string\";\r",
									"            tests[\"type is string\"] = typeof(body.accounts[0].type) === \"string\";\r",
									"            tests[\"linkedAccountId is string\"] = typeof(body.accounts[0].linkedAccountId) === \"string\";\r",
									"            tests[\"productId is number\"] = typeof(body.accounts[0].productId) === \"number\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.firstName).to.not.be.null;\r",
									"                pm.expect(response.lastName).to.not.be.null;\r",
									"                pm.expect(response.mobile).to.not.be.null;\r",
									"                pm.expect(response.relationship).to.not.be.null;\r",
									"                pm.expect(response.countryCode).to.not.be.null;\r",
									"                pm.expect(response.countryName).to.not.be.null;\r",
									"                pm.expect(response.customerId).to.not.be.null;\r",
									"                pm.expect(response.vat).to.not.be.null;\r",
									"                pm.expect(response.amountToPay).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].beneficiaryPayoutMethod).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].recipientType).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].nickname).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].beneficiaryType).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].type).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].linkedAccountId).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].productId).to.not.be.null;\r",
									"                \r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/recipient/details?countryIsoCode={{receivingCountryIsdCode}}&mobileNo={{env-recipient-ZW-mobileNumber}}",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient",
								"details"
							],
							"query": [
								{
									"key": "countryIsoCode",
									"value": "{{receivingCountryIsdCode}}"
								},
								{
									"key": "mobileNo",
									"value": "{{env-recipient-ZW-mobileNumber}}"
								}
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "delete recipient or unlink account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Delete recipient api working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"message is string\"] = typeof(body.message) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.message).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/recipient/{{beneficiaryId}}",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient",
								"{{beneficiaryId}}"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "add recepient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Add recipient API working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Assuming the full name is stored in a variable named \"fullName\"\r",
									"var fullName = pm.variables.get(\"recipient-fullName\");\r",
									"\r",
									"// Splitting the full name into an array of first and last name\r",
									"var nameArray = fullName.split(\" \");\r",
									"\r",
									"// Extracting the first name and last name\r",
									"var firstName = nameArray[0];\r",
									"var lastName = nameArray.slice(1).join(\" \"); // Joining the remaining elements as the last name\r",
									"\r",
									"// Setting the first and last name as environment variables\r",
									"pm.environment.set(\"recipient-firstName\", firstName);\r",
									"pm.environment.set(\"recipient-lastName\", lastName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{recipient-firstName}}\",\r\n  \"lastName\": \"{{recipient-lastName}}\",\r\n  \"relationship\": \"{{relationship}}\",\r\n  \"mobileNo\": [\r\n    \"{{receivingCountryIsdCode}}\",\r\n    \"{{env-recipient-ZW-mobileNumber}}\"\r\n\r\n  ],\r\n  \"countryId\": \"{{receivingCountryId}}\",\r\n  \"productId\": {{productId}},\r\n   \"type\":\"CASH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/recipient",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get recipient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Get Profile API working or not for new email with below test cases.\r",
									"\r",
									"//environment setup\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"beneficiaryId\", jsonData.accounts[0].linkedAccountId)\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"firstName is string\"] = typeof(body.firstName) === \"string\";\r",
									"            tests[\"lastName is string\"] = typeof(body.lastName) === \"string\";\r",
									"            tests[\"mobile is string\"] = typeof(body.mobile) === \"string\";\r",
									"            tests[\"relationship is string\"] = typeof(body.relationship) === \"string\";\r",
									"            tests[\"countryCode is string\"] = typeof(body.countryCode) === \"string\";\r",
									"            tests[\"countryName is string\"] = typeof(body.countryName) === \"string\";\r",
									"            tests[\"customerId is string\"] = typeof(body.customerId) === \"string\";\r",
									"            tests[\"beneficiaryPayoutMethod is string\"] = typeof(body.accounts[0].beneficiaryPayoutMethod) === \"string\";\r",
									"            tests[\"recipientType is string\"] = typeof(body.accounts[0].recipientType) === \"string\";\r",
									"            tests[\"nickname is string\"] = typeof(body.accounts[0].nickname) === \"string\";\r",
									"            tests[\"beneficiaryType is string\"] = typeof(body.accounts[0].beneficiaryType) === \"string\";\r",
									"            tests[\"type is string\"] = typeof(body.accounts[0].type) === \"string\";\r",
									"            tests[\"linkedAccountId is string\"] = typeof(body.accounts[0].linkedAccountId) === \"string\";\r",
									"            tests[\"productId is number\"] = typeof(body.accounts[0].productId) === \"number\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.firstName).to.not.be.null;\r",
									"                pm.expect(response.lastName).to.not.be.null;\r",
									"                pm.expect(response.mobile).to.not.be.null;\r",
									"                pm.expect(response.relationship).to.not.be.null;\r",
									"                pm.expect(response.countryCode).to.not.be.null;\r",
									"                pm.expect(response.countryName).to.not.be.null;\r",
									"                pm.expect(response.customerId).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].beneficiaryPayoutMethod).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].recipientType).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].nickname).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].beneficiaryType).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].type).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].linkedAccountId).to.not.be.null;\r",
									"                pm.expect(response.accounts[0].productId).to.not.be.null;\r",
									"                \r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/recipient/details?countryIsoCode={{receivingCountryIsdCode}}&mobileNo={{env-recipient-ZW-mobileNumber}}",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient",
								"details"
							],
							"query": [
								{
									"key": "countryIsoCode",
									"value": "{{receivingCountryIsdCode}}"
								},
								{
									"key": "mobileNo",
									"value": "{{env-recipient-ZW-mobileNumber}}"
								}
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get recipient list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Get recipient list API working or not for new email with below test cases.\r",
									"\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"firstName is string\"] = typeof(body.items[0].firstName) === \"string\";\r",
									"            tests[\"lastName is string\"] = typeof(body.items[0].lastName) === \"string\";\r",
									"            tests[\"mobile is string\"] = typeof(body.items[0].mobile) === \"string\";\r",
									"            tests[\"countryIsdCode is string\"] = typeof(body.items[0].countryIsdCode) === \"string\";\r",
									"            tests[\"relationship is string\"] = typeof(body.items[0].relationship) === \"string\";\r",
									"            tests[\"beneficiaryId is string\"] = typeof(body.items[0].beneficiaryId) === \"string\";\r",
									"            tests[\"customerId is string\"] = typeof(body.items[0].customerId) === \"string\";\r",
									"       \r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.items[0].firstName).to.not.be.null;\r",
									"                pm.expect(response.items[0].lastName).to.not.be.null;\r",
									"                pm.expect(response.items[0].mobile).to.not.be.null;\r",
									"                pm.expect(response.items[0].countryIsdCode).to.not.be.null;\r",
									"                pm.expect(response.items[0].relationship).to.not.be.null;\r",
									"                pm.expect(response.items[0].beneficiaryId).to.not.be.null;\r",
									"                pm.expect(response.items[0].customerId).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/recipient/list",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient",
								"list"
							],
							"query": [
								{
									"key": "search",
									"value": "Alexandra",
									"disabled": true
								}
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "payment options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"            const responseBody = pm.response.text();\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests['value for eft is string'] = typeof body.items[0].value === 'string';\r",
									"            tests['value for cash is string'] = typeof body.items[1].value === 'string';\r",
									"            tests['value for card is string'] = typeof body.items[2].value === 'string';\r",
									"            var response = pm.response.json();\r",
									"           \r",
									"\r",
									"            var response = pm.response.json();\r",
									"            pm.test('value matches', function () {\r",
									"                \r",
									"                let expectedValue1 = 'EFT';\r",
									"                let actualValue1 = response.items[0].value;\r",
									"                pm.expect(actualValue1).to.eql(expectedValue1);\r",
									"                let expectedValue2 = 'Cash';\r",
									"                let actualValue2 = response.items[1].value;\r",
									"                pm.expect(actualValue2).to.eql(expectedValue2);\r",
									"                let expectedValue3 = 'Card';\r",
									"                let actualValue3 = response.items[2].value;\r",
									"                pm.expect(actualValue3).to.eql(expectedValue3);\r",
									"            });\r",
									"            return true;\r",
									"        } else {\r",
									"            const responseBody = pm.response.text();\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests['errorUserMsg is string'] = typeof body.errorUserMsg === 'string';\r",
									"            var actualValue = body.errorCode;\r",
									"            var expectedValues = pm.globals.get('errorCode');\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"            pm.test(`Verify that \"${ actualValue }\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log('actualValue');\r",
									"            });\r",
									"            return false;\r",
									"        }\r",
									"    });\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bff-url}}/v1/payment/options?serviceType=ZAPersonPaymentOptions",
							"host": [
								"{{bff-url}}"
							],
							"path": [
								"v1",
								"payment",
								"options"
							],
							"query": [
								{
									"key": "serviceType",
									"value": "ZAPersonPaymentOptions"
								}
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "add transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that add transaction API working or not for new email with below test cases.\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"transactionId\", jsonData.transactionId);\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"transactionId is string\"] = typeof(body.transactionId) === \"string\";\r",
									"            tests[\"transactionDate is string\"] = typeof(body.transactionDate) === \"string\";\r",
									"            tests[\"expiryDate is string\"] = typeof(body.expiryDate) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.transactionId).to.not.be.null;\r",
									"                pm.expect(response.transactionDate).to.not.be.null;\r",
									"                pm.expect(response.expiryDate).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"reasonForTransfer\": \"{{reasonForTransfer}}\",\r\n  \"sourceOfFunds\": \"SAL\",\r\n  \"beneficiaryId\": \"{{beneficiaryId}}\",\r\n  \"calculationId\": \"{{calculationId}}\",\r\n  \"paymentMethodId\": \"10-I\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/transaction",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "cash_update transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that add transaction API working or not for new email with below test cases.\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"transactionId\", jsonData.transactionId);\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"transactionId is string\"] = typeof(body.transactionId) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.transactionId).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"paymentMethodCode\": \"cash\",\r\n  \"transactionId\": \"{{transactionId}}\",\r\n   \"providerCode\": \"imb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/transaction",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Negative cash_update transaction after already updated once",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that add transaction API working or not for new email with below test cases.\r",
									"\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"transactionId is string\"] = typeof(body.transactionId) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.transactionId).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return false;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return true;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"paymentMethodCode\": \"cash\",\r\n  \"transactionId\": \"{{transactionId}}\",\r\n   \"providerCode\": \"imb\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/transaction",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "rate calculation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Rate calculation API working or not for new email with below test cases.\r",
									"\r",
									"//environment setup\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"calculationId\", jsonData.calculationId)\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"calculationId is string\"] = typeof(body.calculationId) === \"string\";\r",
									"            tests[\"calculateId is string\"] = typeof(body.calculateId) === \"string\";\r",
									"            tests[\"sendingAmount is string\"] = typeof(body.sendingAmount) === \"string\";\r",
									"            tests[\"recipientAmount is string\"] = typeof(body.recipientAmount) === \"string\";\r",
									"            tests[\"rate is string\"] = typeof(body.rate) === \"string\";\r",
									"            tests[\"reverseRate is string\"] = typeof(body.reverseRate) === \"string\";\r",
									"            tests[\"fees is string\"] = typeof(body.fees) === \"string\";\r",
									"            tests[\"vat is string\"] = typeof(body.vat) === \"string\";\r",
									"            tests[\"amountToPay is string\"] = typeof(body.amountToPay) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.calculationId).to.not.be.null;\r",
									"                pm.expect(response.calculateId).to.not.be.null;\r",
									"                pm.expect(response.sendingAmount).to.not.be.null;\r",
									"                pm.expect(response.recipientAmount).to.not.be.null;\r",
									"                pm.expect(response.rate).to.not.be.null;\r",
									"                pm.expect(response.reverseRate).to.not.be.null;\r",
									"                pm.expect(response.fees).to.not.be.null;\r",
									"                pm.expect(response.vat).to.not.be.null;\r",
									"                pm.expect(response.amountToPay).to.not.be.null;\r",
									"                \r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"receive\": false,\r\n  \"amount\": \"101\",\r\n  \"receivingCountryId\": {{receivingCountryId}},\r\n \"sendingCountryId\": {{sendingCountryId}},\r\n  \"sendingCurrencyId\": {{sendingCurrencyId}},\r\n  \"receivingCurrencyId\": {{receivingCurrencyId}},\r\n  \"productId\": {{productId}},\r\n  \"paymentMethodId\": \"{{paymentMethodId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/rate/calculation",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"rate",
								"calculation"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "add transaction for eft",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that add transaction API working or not for new email with below test cases.\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"transactionId\", jsonData.transactionId);\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"transactionId is string\"] = typeof(body.transactionId) === \"string\";\r",
									"            tests[\"transactionDate is string\"] = typeof(body.transactionDate) === \"string\";\r",
									"            tests[\"expiryDate is string\"] = typeof(body.expiryDate) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.transactionId).to.not.be.null;\r",
									"                pm.expect(response.transactionDate).to.not.be.null;\r",
									"                pm.expect(response.expiryDate).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"reasonForTransfer\": \"{{reasonForTransfer}}\",\r\n  \"sourceOfFunds\": \"SAL\",\r\n  \"beneficiaryId\": \"{{beneficiaryId}}\",\r\n  \"calculationId\": \"{{calculationId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/transaction",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "eft_update transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that EFT update transaction api working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"transactionUrl is string\"] = typeof(body.transactionUrl) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.transactionUrl).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"paymentMethodCode\": \"eft\",\r\n  \"transactionId\": \"{{transactionId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/transaction",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "rate calculation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Rate calculation API working or not for new email with below test cases.\r",
									"\r",
									"//environment setup\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"calculationId\", jsonData.calculationId)\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"calculationId is string\"] = typeof(body.calculationId) === \"string\";\r",
									"            tests[\"calculateId is string\"] = typeof(body.calculateId) === \"string\";\r",
									"            tests[\"sendingAmount is string\"] = typeof(body.sendingAmount) === \"string\";\r",
									"            tests[\"recipientAmount is string\"] = typeof(body.recipientAmount) === \"string\";\r",
									"            tests[\"rate is string\"] = typeof(body.rate) === \"string\";\r",
									"            tests[\"reverseRate is string\"] = typeof(body.reverseRate) === \"string\";\r",
									"            tests[\"fees is string\"] = typeof(body.fees) === \"string\";\r",
									"            tests[\"vat is string\"] = typeof(body.vat) === \"string\";\r",
									"            tests[\"amountToPay is string\"] = typeof(body.amountToPay) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.calculationId).to.not.be.null;\r",
									"                pm.expect(response.calculateId).to.not.be.null;\r",
									"                pm.expect(response.sendingAmount).to.not.be.null;\r",
									"                pm.expect(response.recipientAmount).to.not.be.null;\r",
									"                pm.expect(response.rate).to.not.be.null;\r",
									"                pm.expect(response.reverseRate).to.not.be.null;\r",
									"                pm.expect(response.fees).to.not.be.null;\r",
									"                pm.expect(response.vat).to.not.be.null;\r",
									"                pm.expect(response.amountToPay).to.not.be.null;\r",
									"                \r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"receive\": false,\r\n  \"amount\": \"101\",\r\n  \"receivingCountryId\": {{receivingCountryId}},\r\n \"sendingCountryId\": {{sendingCountryId}},\r\n  \"sendingCurrencyId\": {{sendingCurrencyId}},\r\n  \"receivingCurrencyId\": {{receivingCurrencyId}},\r\n  \"productId\": {{productId}},\r\n  \"paymentMethodId\": \"{{paymentMethodId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/rate/calculation",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"rate",
								"calculation"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "add transaction for card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that add transaction API working or not for new email with below test cases.\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"transactionId\", jsonData.transactionId);\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"transactionId is string\"] = typeof(body.transactionId) === \"string\";\r",
									"            tests[\"transactionDate is string\"] = typeof(body.transactionDate) === \"string\";\r",
									"            tests[\"expiryDate is string\"] = typeof(body.expiryDate) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.transactionId).to.not.be.null;\r",
									"                pm.expect(response.transactionDate).to.not.be.null;\r",
									"                pm.expect(response.expiryDate).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"reasonForTransfer\": \"{{reasonForTransfer}}\",\r\n  \"sourceOfFunds\": \"SAL\",\r\n  \"beneficiaryId\": \"{{beneficiaryId}}\",\r\n  \"calculationId\": \"{{calculationId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/transaction",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "card_update transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that card update transaction api working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"transactionUrl is string\"] = typeof(body.transactionUrl) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.transactionUrl).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"paymentMethodCode\": \"card\",\r\n  \"transactionId\": \"{{transactionId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{remit-url}}/v1/transaction",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "get card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that get card api working or not with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"instrumentId is string\"] = typeof(body.items[0].instrumentId) === \"string\";\r",
									"            tests[\"nickName is string\"] = typeof(body.items[0].nickName) === \"string\";\r",
									"            tests[\"type is string\"] = typeof(body.items[0].type) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.items[0].instrumentId).to.not.be.null;\r",
									"                pm.expect(response.items[0].nickName).to.not.be.null;\r",
									"                pm.expect(response.items[0].type).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/cards",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"cards"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "transaction list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that transaction list api working or not with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"transactionId is string\"] = typeof(body.items[0].transactionId) === \"string\";\r",
									"            tests[\"status is string\"] = typeof(body.items[0].status) === \"string\";\r",
									"            tests[\"transactionDate is string\"] = typeof(body.items[0].transactionDate) === \"string\";\r",
									"            tests[\"beneficiaryName is string\"] = typeof(body.items[0].beneficiaryName) === \"string\";\r",
									"            tests[\"reasonForTransfer is string\"] = typeof(body.items[0].reasonForTransfer) === \"string\";\r",
									"            tests[\"sendingAmount is string\"] = typeof(body.items[0].sendingAmount) === \"string\";\r",
									"            tests[\"recipientAmount is string\"] = typeof(body.items[0].recipientAmount) === \"string\";\r",
									"            tests[\"sendingCurrencyId is string\"] = typeof(body.items[0].sendingCurrencyId) === \"string\";\r",
									"            tests[\"receivingCurrencyId is string\"] = typeof(body.items[0].receivingCurrencyId) === \"string\";\r",
									"            tests[\"mobileNumber is string\"] = typeof(body.items[0].mobileNumber) === \"string\";\r",
									"            tests[\"statusName is string\"] = typeof(body.items[0].statusName) === \"string\";\r",
									"            tests[\"currency is string\"] = typeof(body.items[0].currency) === \"string\";\r",
									"            tests[\"receiverPaymentMethod is string\"] = typeof(body.items[0].receiverPaymentMethod) === \"string\";\r",
									"            tests[\"receivingCountryCode is string\"] = typeof(body.items[0].receivingCountryCode) === \"string\";\r",
									"            tests[\"senderCountryCode is string\"] = typeof(body.items[0].senderCountryCode) === \"string\";\r",
									"            tests[\"amountToPay is string\"] = typeof(body.items[0].amountToPay) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.items[0].transactionId).to.not.be.null;\r",
									"                pm.expect(response.items[0].status).to.not.be.null;\r",
									"                pm.expect(response.items[0].transactionDate).to.not.be.null;\r",
									"                pm.expect(response.items[0].beneficiaryName).to.not.be.null;\r",
									"                pm.expect(response.items[0].reasonForTransfer).to.not.be.null;\r",
									"                pm.expect(response.items[0].sendingAmount).to.not.be.null;\r",
									"                pm.expect(response.items[0].recipientAmount).to.not.be.null;\r",
									"                pm.expect(response.items[0].sendingCurrencyId).to.not.be.null;\r",
									"                pm.expect(response.items[0].receivingCurrencyId).to.not.be.null;\r",
									"                pm.expect(response.items[0].mobileNumber).to.not.be.null;\r",
									"                pm.expect(response.items[0].statusName).to.not.be.null;\r",
									"                pm.expect(response.items[0].currency).to.not.be.null;\r",
									"                pm.expect(response.items[0].receiverPaymentMethod).to.not.be.null;\r",
									"                pm.expect(response.items[0].receivingCountryCode).to.not.be.null;\r",
									"                pm.expect(response.items[0].senderCountryCode).to.not.be.null;\r",
									"                pm.expect(response.items[0].amountToPay).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/transaction/list",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction",
								"list"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "recent recipient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that recent reccipient  api working or not with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"firstName is string\"] = typeof(body.items[0].firstName) === \"string\";\r",
									"            tests[\"lastName is string\"] = typeof(body.items[0].lastName) === \"string\";\r",
									"            tests[\"countryIsdCode is string\"] = typeof(body.items[0].countryIsdCode) === \"string\";\r",
									"            tests[\"mobile is string\"] = typeof(body.items[0].mobile) === \"string\";\r",
									"            tests[\"beneficiaryId is string\"] = typeof(body.items[0].beneficiaryId) === \"string\";\r",
									"            tests[\"customerId is string\"] = typeof(body.items[0].customerId) === \"string\";\r",
									"            \r",
									"            \r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.items[0].firstName).to.not.be.null;\r",
									"                pm.expect(response.items[0].lastName).to.not.be.null;\r",
									"                pm.expect(response.items[0].countryIsdCode).to.not.be.null;\r",
									"                pm.expect(response.items[0].mobile).to.not.be.null;\r",
									"                pm.expect(response.items[0].beneficiaryId).to.not.be.null;\r",
									"                pm.expect(response.items[0].customerId).to.not.be.null;              \r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/recipient/recent",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient",
								"recent"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Transaction details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Get Profile API working or not for new email with below test cases.\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"recipientAmount\", jsonData.calculation.recipientAmount);\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code is either 200,400,401,403,404,405 or 500 with appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"           \r",
									"\t\r",
									"            //Verify header is present \r",
									"            pm.test('Headaer: Content-Type is present', function () {\r",
									"                pm.response.to.have.header('Content-Type');\r",
									"            });\r",
									"\r",
									"            //Verify header values\r",
									"            pm.test('header values', function () {\r",
									"                pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"            });\r",
									"\r",
									"            //Verify json response have some value \r",
									"            pm.test('Validate the response in json', function () {\r",
									"                var jsonData = pm.response.json();\r",
									"                pm.expect(jsonData.value);\r",
									"            });\r",
									"\r",
									"    \r",
									"            return true;\r",
									"        } else  {\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var possibleChars = \"abcdefghijklmnopqrstuvwxyz1234567890\";\r",
									"var email = \"\";\r",
									"for(var i = 0; i < 10; i++){\r",
									"  email += possibleChars.charAt(Math.floor(Math.random() * possibleChars.length));\r",
									"}\r",
									"email += \"@example.com\";\r",
									"console.log(email); // will output the generated email in console\r",
									"pm.environment.set(\"randomEmail\", email); // will set the generated email as environment variable\r",
									"\r",
									"\r",
									"// Generate random string with 2 alphabets and 8 numbers\r",
									"function generateRandomData() {\r",
									"    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"    let randomString = '';\r",
									"\r",
									"    // Generate 2 random alphabets\r",
									"    for (let i = 0; i < 2; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"        randomString += alphabet.charAt(randomIndex);\r",
									"    }\r",
									"\r",
									"    // Generate 8 random numbers\r",
									"    for (let i = 0; i < 8; i++) {\r",
									"        randomString += Math.floor(Math.random() * 10); // Generates a random digit (0-9)\r",
									"    }\r",
									"\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"const randomData = generateRandomData();\r",
									"pm.environment.set('idDocumentNumber', randomData);\r",
									"console.log('Random Data:', randomData);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/transaction/{{transactionId}}",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"transaction",
								"{{transactionId}}"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "delete recipient or unlink account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Objective: Verify that Delete recipient api working or not for new email with below test cases.\r",
									"\r",
									"//Verify test cases according to error codes\r",
									"pm.test('Verify that the status code appropriate error messages', function () {\r",
									"    const statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.satisfy(function (code) {\r",
									"        if (code == 200) {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"            //Verify the json Data types\r",
									"            var body = JSON.parse(responseBody);\r",
									"            tests[\"message is string\"] = typeof(body.message) === \"string\";\r",
									"\r",
									"            // Verify the value in response is not null\r",
									"            var response = pm.response.json()\r",
									"            pm.test(\"value is not null\", function () {\r",
									"                pm.expect(response.message).to.not.be.null;\r",
									"                \r",
									"            });\r",
									"\t\r",
									"        \r",
									"            return true;\r",
									"\r",
									"        } else  {\r",
									"\r",
									"            // Get the response body\r",
									"            const responseBody = pm.response.text();\r",
									"\r",
									"            // Function to check if a string is a valid JSON\r",
									"            function isValidJSON(str) {\r",
									"                try {\r",
									"                    JSON.parse(str);\r",
									"                    return true;\r",
									"                } catch (e) {\r",
									"                    return false;\r",
									"                }\r",
									"            }\r",
									"\r",
									"           var body = JSON.parse(responseBody);\r",
									"            tests[\"errorUserMsg is string\"] = typeof(body.errorUserMsg) === \"string\";\r",
									"            // Extract the value from the response body\r",
									"            var actualValue = body.errorCode; // replace 'key' with the actual key in your response\r",
									"\r",
									"            // Get the value of the variable\r",
									"            var expectedValues = pm.globals.get(\"errorCode\");\r",
									"            var isValueInList = expectedValues.includes(actualValue);\r",
									"\r",
									"            // Perform an assertion\r",
									"            pm.test(`Verify that \"${actualValue}\" is in the list of expected values`, () => {\r",
									"                pm.expect(isValueInList).to.be.true;\r",
									"                console.log(\"actualValue\")\r",
									"            });\r",
									"            return false;\r",
									"        }                 \r",
									"     }, );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{remit-url}}/v1/recipient/{{beneficiaryId}}",
							"host": [
								"{{remit-url}}"
							],
							"path": [
								"v1",
								"recipient",
								"{{beneficiaryId}}"
							]
						},
						"description": "StartFragment\n\n- Verify the status code\n- Verify that the required Header is present or not\n- Verify the response has a valid JSON body\n- Verify the json Data types\n- Verify that the response data fields are blank or not\n- Verify the API response time\n- Verify the Header values\n    \n\nEndFragment"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Verify the response time\r",
					"pm.test(\"Response time is less than 5000ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
					"});\r",
					""
				]
			}
		}
	]
}